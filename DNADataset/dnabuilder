#!/bin/bash

#INPUT: Set dnabuilder directory
export BUILDDIR="/gscratch/stf/willll/DNADataGen"

# Help text
Help()
{
   # Display Help
   echo "dsDNA PDB and Gaussian input file builder using NAB"
   echo
   echo "Syntax: dnabuilder [-h|s|t]"
   echo "options:"
   echo "-h           Print this Help."
   echo "-s \"seq\"   Sequence (must be a string with G,C,A,T only)"
   echo "-t (A|B)     DNA type"
   echo
   echo "Examples:"
   echo "$0 -s \"ATCGATCG\" -t B"
   echo "$0 -s \"GGCCAATT\""
   echo
}


# Set variables
seq="GGCCGG"
typ="B"
dnacmd="abdna"

## PROCESS INPUT
# Check flags        
while getopts ":hs:t:" option; do
   case $option in
      h) # display Help
         Help
         exit 0;;
      s) # sequence data
         seq=$OPTARG;;
      t) # type of DNA
         typ=$OPTARG;;
     \?) # Invalid option
         echo "Error: Invalid option -$OPTARG"
         Help
         exit 1;;
      *) # Invalid option
         echo "Error: Option -$OPTARG requires an argument"
         Help
         exit;;
   esac
done

# If no options passed, display help
if [ $OPTIND -eq 1 ]; then 
    Help; 
    exit 0; 
fi

# A- or B-DNA, defaults to B-DNA
case $typ in
   "B" | "b")
      dnacmd="abdna";;
   "A" | "a")
      dnacmd="adna";;
   *)
      echo "Invalid DNA type, defaulting to B-DNA"
      typ="B"
esac

seq_lowercase=$(echo "$seq" | tr A-Z a-z)

dna_sequence=$(echo "$seq_lowercase" | sed 's/[^gcat]//g')
    
# Check if any valid DNA characters were found
if [[ -z "$dna_sequence" ]]; then
    echo "Error: No valid DNA characters (G, C, A, T) found in input string" >&2
    exit 1
fi

set -e 

## RUN NAB
# Create nuc.nab
echo "molecule m;" > nuc.nab
echo "m = fd_helix( \"$dnacmd\", \"$dna_sequence\", \"dna\" );" >> nuc.nab
echo "putpdb( \"$seq_lowercase.pdb\", m, \"-wwpdb\");" >> nuc.nab

echo "Running NAB to generate $seq_lowercase.pdb..."
# Run nab and output
source $BUILDDIR/nabc/nabc.sh
export AMBERHOME=$BUILDDIR/AmberEnv
nab -nodebug nuc.nab
./a.out
echo "Done!!"


## GENERATE GJF INPUT FILE
echo "Writing input file to $seq_lowercase.gjf..."
# Create headers
echo "%chk=$seq_lowercase.chk" > $seq_lowercase.gjf
echo "#p b3lyp/6-31g(d,p) scrf=(solvent=water)" >> $seq_lowercase.gjf
echo "" >> $seq_lowercase.gjf
echo "$typ-DNA sequence ($seq_lowercase)" >> $seq_lowercase.gjf
echo "" >> $seq_lowercase.gjf

# Write Charge (number of phosphates = (sequence length-1)*2)
charge=$(((${#seq_lowercase}-1)*2))
echo "-$charge 1" >> $seq_lowercase.gjf

# Extract coordinates from PDB and write to gjf file
awk '
    /^ATOM/ || /^HETATM/ {
        # Try to get element from columns 77-78 first
        element = substr($0, 77, 2)
        gsub(/[ ]+/, "", element)
        
        # If element field is empty, extract from atom name
        if (element == "") {
            atom_name = substr($0, 13, 4)
            gsub(/[ ]+/, "", atom_name)
            # Extract just the first 1-2 letters (element symbol)
            if (match(atom_name, /^[A-Za-z]+/)) {
                element = substr(atom_name, 1, RLENGTH)
            }
        }
        
        # Extract coordinates
        x = substr($0, 31, 8) + 0
        y = substr($0, 39, 8) + 0
        z = substr($0, 47, 8) + 0
        
        # Print in GJF format
        printf "%-8s %12.6f %12.6f %12.6f\n", element, x, y, z
    }
    ' $seq_lowercase.pdb >> $seq_lowercase.gjf
echo "" >> $seq_lowercase.gjf
echo "" >> $seq_lowercase.gjf
echo "Done!!"
exit 0 
